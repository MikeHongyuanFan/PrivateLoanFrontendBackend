# Generated by Django 4.2.7 on 2025-06-24 01:00

from django.db import migrations, models, connection


def check_column_exists(table_name, column_name):
    """Check if a column exists in a table"""
    cursor = connection.cursor()
    cursor.execute("""
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name = %s AND column_name = %s
    """, [table_name, column_name])
    return cursor.fetchone() is not None


def safe_add_is_archived_field(apps, schema_editor):
    """Safely add is_archived field only if it doesn't exist"""
    if not check_column_exists('applications_application', 'is_archived'):
        # Column doesn't exist, so we need to add it
        schema_editor.execute("""
            ALTER TABLE applications_application 
            ADD COLUMN is_archived boolean DEFAULT false NOT NULL
        """)
        print("✅ Added is_archived column")
    else:
        print("✅ is_archived column already exists, skipping")


def safe_add_is_archived_index(apps, schema_editor):
    """Safely add index only if it doesn't exist"""
    cursor = connection.cursor()
    cursor.execute("""
        SELECT indexname 
        FROM pg_indexes 
        WHERE tablename = 'applications_application' 
        AND indexname = 'application_is_arch_2b9bbe_idx'
    """)
    
    if not cursor.fetchone():
        # Index doesn't exist, so we need to add it
        schema_editor.execute("""
            CREATE INDEX application_is_arch_2b9bbe_idx 
            ON applications_application (is_archived)
        """)
        print("✅ Added is_archived index")
    else:
        print("✅ is_archived index already exists, skipping")


def reverse_is_archived_changes(apps, schema_editor):
    """Remove the is_archived field and index"""
    # Remove index first
    cursor = connection.cursor()
    cursor.execute("""
        SELECT indexname 
        FROM pg_indexes 
        WHERE tablename = 'applications_application' 
        AND indexname = 'application_is_arch_2b9bbe_idx'
    """)
    
    if cursor.fetchone():
        schema_editor.execute("DROP INDEX IF EXISTS application_is_arch_2b9bbe_idx")
        print("✅ Removed is_archived index")
    
    # Remove column
    if check_column_exists('applications_application', 'is_archived'):
        schema_editor.execute("ALTER TABLE applications_application DROP COLUMN is_archived")
        print("✅ Removed is_archived column")


class Migration(migrations.Migration):

    dependencies = [
        ('applications', '0021_alter_application_quantity_surveyor_and_more'),
    ]

    operations = [
        migrations.RunPython(
            safe_add_is_archived_field,
            reverse_is_archived_changes,
        ),
        migrations.RunPython(
            safe_add_is_archived_index,
            lambda apps, schema_editor: None,  # No-op for reverse
        ),
    ] 