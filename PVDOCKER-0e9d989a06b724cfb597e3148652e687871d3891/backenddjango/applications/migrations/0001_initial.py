# Generated by Django 4.2.7 on 2025-06-25 20:02

import applications.models.core
import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ActiveLoan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='When this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this record was last updated')),
                ('settlement_date', models.DateField(help_text='Date when the loan was settled')),
                ('capitalised_interest_months', models.PositiveIntegerField(default=0, help_text='Number of months for capitalised interest')),
                ('interest_payments_required', models.BooleanField(default=False, help_text='Whether interest payments are required during the loan term')),
                ('interest_payment_frequency', models.CharField(blank=True, choices=[('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('semi_annually', 'Semi-Annually'), ('annually', 'Annually')], help_text='Frequency of interest payments (if required)', max_length=20, null=True)),
                ('interest_payment_due_dates', models.JSONField(default=list, help_text='List of dates when interest payments are due')),
                ('loan_expiry_date', models.DateField(help_text='Date when the loan expires')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this loan is currently active')),
            ],
            options={
                'verbose_name': 'Active Loan',
                'verbose_name_plural': 'Active Loans',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ActiveLoanRepayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='When this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this record was last updated')),
                ('repayment_type', models.CharField(choices=[('interest', 'Interest Payment'), ('principal', 'Principal Payment'), ('principal_interest', 'Principal + Interest'), ('penalty', 'Penalty Payment'), ('early_settlement', 'Early Settlement')], help_text='Type of repayment', max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, help_text='Repayment amount', max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('payment_date', models.DateField(help_text='Date the payment was made')),
                ('due_date', models.DateField(blank=True, help_text='Original due date for this payment', null=True)),
                ('reference_number', models.CharField(blank=True, help_text='Bank reference or transaction number', max_length=100, null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this repayment', null=True)),
                ('is_late', models.BooleanField(default=False, help_text='Whether this payment was made after the due date')),
            ],
            options={
                'verbose_name': 'Active Loan Repayment',
                'verbose_name_plural': 'Active Loan Repayments',
                'ordering': ['-payment_date'],
            },
        ),
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='When this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this record was last updated')),
                ('reference_number', models.CharField(default=applications.models.core.generate_reference_number, help_text='Unique reference number for this application', max_length=20, unique=True)),
                ('stage', models.CharField(choices=[('received', 'Received'), ('sent_to_lender', 'Sent to Lender/Investor'), ('funding_table_issued', 'Funding Table Issued'), ('indicative_letter_issued', 'Indicative Letter Issued'), ('indicative_letter_signed', 'Indicative Letter Signed'), ('commitment_fee_received', 'Commitment Fee Received'), ('application_submitted', 'Application Submitted'), ('valuation_ordered', 'Valuation Ordered'), ('valuation_received', 'Valuation Received'), ('more_info_required', 'More Information Required'), ('formal_approval', 'Formal Approval'), ('loan_docs_instructed', 'Loan Documents Instructed'), ('loan_docs_issued', 'Loan Documents Issued'), ('loan_docs_signed', 'Loan Documents Signed'), ('settlement_conditions', 'Settlement Conditions'), ('settled', 'Settled'), ('closed', 'Closed'), ('discharged', 'Discharged')], default='received', help_text='Current stage of the application', max_length=25)),
                ('stage_history', models.JSONField(default=list, help_text='History of stage changes with timestamps and users')),
                ('is_archived', models.BooleanField(default=False, help_text="Whether this application is archived (automatically set when stage is 'closed')")),
                ('application_type', models.CharField(blank=True, choices=[('acquisition', 'Acquisition'), ('refinance', 'Refinance'), ('equity_release', 'Equity Release'), ('refinance_equity_release', 'Refinance & Equity Release'), ('second_mortgage', '2nd Mortgage'), ('caveat', 'Caveat'), ('other', 'Other')], help_text='Type of loan application', max_length=30, null=True)),
                ('application_type_other', models.TextField(blank=True, help_text="Details for 'Other' application type", null=True)),
                ('purpose', models.TextField(blank=True, default='', help_text='General purpose of the application', null=True)),
                ('loan_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Requested loan amount', max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('loan_term', models.PositiveIntegerField(blank=True, help_text='Loan term in months', null=True)),
                ('capitalised_interest_term', models.PositiveIntegerField(blank=True, help_text='Capitalised interest term in months', null=True)),
                ('interest_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Interest rate as percentage', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('repayment_frequency', models.CharField(choices=[('weekly', 'Weekly'), ('fortnightly', 'Fortnightly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('annually', 'Annually')], default='monthly', help_text='How often repayments are made', max_length=20)),
                ('product_id', models.CharField(blank=True, help_text='Product identifier', max_length=50, null=True)),
                ('estimated_settlement_date', models.DateField(blank=True, help_text='Expected settlement date', null=True)),
                ('loan_purpose', models.CharField(blank=True, choices=[('purchase', 'Purchase'), ('refinance', 'Refinance'), ('construction', 'Construction'), ('equity_release', 'Equity Release'), ('debt_consolidation', 'Debt Consolidation'), ('business_expansion', 'Business Expansion'), ('working_capital', 'Working Capital'), ('other', 'Other')], help_text='Specific purpose of the loan', max_length=50, null=True)),
                ('additional_comments', models.TextField(blank=True, help_text='Additional comments about the loan', null=True)),
                ('prior_application', models.BooleanField(default=False, help_text='Whether there was a prior application')),
                ('prior_application_details', models.TextField(blank=True, help_text='Details about prior applications', null=True)),
                ('has_other_credit_providers', models.BooleanField(blank=True, default=None, help_text='Has any application in respect of this loan been submitted by you or any other person to other credit providers?', null=True)),
                ('other_credit_providers_details', models.TextField(blank=True, help_text='Details about applications submitted to other credit providers', null=True)),
                ('application_already_submitted', models.BooleanField(default=False, help_text='Whether the application has already been submitted')),
                ('exit_strategy', models.CharField(blank=True, choices=[('sale', 'Sale of Property'), ('refinance', 'Refinance'), ('income', 'Income/Cash Flow'), ('other', 'Other')], help_text='Planned exit strategy for the loan', max_length=50, null=True)),
                ('exit_strategy_details', models.TextField(blank=True, help_text='Additional details about exit strategy', null=True)),
                ('has_pending_litigation', models.BooleanField(blank=True, default=None, help_text='Do the Borrower(s) and Guarantor(s) have any pending or past litigation matters (within the last 2 years)?', null=True)),
                ('has_unsatisfied_judgements', models.BooleanField(blank=True, default=None, help_text='Are there any unsatisfied judgements against the Borrower(s) and Guarantor(s)?', null=True)),
                ('has_been_bankrupt', models.BooleanField(blank=True, default=None, help_text='Have the Borrower(s) and Guarantor(s) been bankrupt or insolvent in the past 5 years?', null=True)),
                ('has_been_refused_credit', models.BooleanField(blank=True, default=None, help_text='Has the Borrower(s) and Guarantor(s) been refused credit by a credit provider in the last 1 year?', null=True)),
                ('has_outstanding_ato_debt', models.BooleanField(blank=True, default=None, help_text='Are there any outstanding debts current or otherwise due to the ATO by the Borrower(s) and Guarantor(s)?', null=True)),
                ('has_outstanding_tax_returns', models.BooleanField(blank=True, default=None, help_text='Does the Borrower(s) and Guarantor(s) have outstanding Tax or BAS returns due to be lodged with the ATO?', null=True)),
                ('has_payment_arrangements', models.BooleanField(blank=True, default=None, help_text='Has the Borrower(s) and Guarantor(s) made payment arrangements with a creditor to payout debt that is still current?', null=True)),
                ('solvency_enquiries_details', models.TextField(blank=True, help_text="Additional details for any 'Yes' answers to solvency enquiries", null=True)),
                ('funding_result', models.JSONField(blank=True, help_text='Stores the current funding calculation result', null=True)),
                ('signed_by', models.CharField(blank=True, help_text='Name of person who signed the application', max_length=255, null=True)),
                ('signature_date', models.DateField(blank=True, help_text='Date the application was signed', null=True)),
                ('uploaded_pdf_path', models.FileField(blank=True, help_text='Uploaded signed application form', null=True, upload_to='applications/signed_forms/')),
                ('valuer_company_name', models.CharField(blank=True, help_text='[Legacy] Valuer company name', max_length=255, null=True)),
                ('valuer_contact_name', models.CharField(blank=True, help_text='[Legacy] Valuer contact person name', max_length=255, null=True)),
                ('valuer_phone', models.CharField(blank=True, help_text='[Legacy] Valuer phone number', max_length=20, null=True)),
                ('valuer_email', models.EmailField(blank=True, help_text='[Legacy] Valuer email address', max_length=254, null=True)),
                ('valuation_date', models.DateField(blank=True, help_text='Date of property valuation', null=True)),
                ('valuation_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Valuation amount', max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('qs_company_name', models.CharField(blank=True, help_text='[Legacy] QS company name', max_length=255, null=True)),
                ('qs_contact_name', models.CharField(blank=True, help_text='[Legacy] QS contact person name', max_length=255, null=True)),
                ('qs_phone', models.CharField(blank=True, help_text='[Legacy] QS phone number', max_length=20, null=True)),
                ('qs_email', models.EmailField(blank=True, help_text='[Legacy] QS email address', max_length=254, null=True)),
                ('qs_report_date', models.DateField(blank=True, help_text='Date of QS report', null=True)),
                ('security_address', models.TextField(blank=True, help_text='[Legacy] Security property address', null=True)),
                ('security_type', models.CharField(blank=True, help_text='[Legacy] Security property type', max_length=50, null=True)),
                ('security_value', models.DecimalField(blank=True, decimal_places=2, help_text='[Legacy] Security property value', max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(0)])),
            ],
            options={
                'verbose_name': 'Application',
                'verbose_name_plural': 'Applications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='When this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this record was last updated')),
                ('document_type', models.CharField(choices=[('id', 'Identification'), ('income', 'Income Verification'), ('bank_statement', 'Bank Statement'), ('property', 'Property Document'), ('application', 'Application Form'), ('contract', 'Contract'), ('valuation', 'Valuation Report'), ('other', 'Other')], default='other', help_text='Type of document', max_length=20)),
                ('file', models.FileField(blank=True, help_text='The uploaded document file', null=True, upload_to='documents/')),
                ('description', models.TextField(blank=True, help_text='Additional description of the document', null=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, help_text='When the document was uploaded')),
            ],
            options={
                'verbose_name': 'Document',
                'verbose_name_plural': 'Documents',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='Fee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='When this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this record was last updated')),
                ('fee_type', models.CharField(choices=[('application', 'Application Fee'), ('valuation', 'Valuation Fee'), ('legal', 'Legal Fee'), ('broker', 'Broker Commission'), ('settlement', 'Settlement Fee'), ('other', 'Other Fee')], default='other', help_text='Type of fee', max_length=20)),
                ('amount', models.DecimalField(blank=True, decimal_places=2, help_text='Fee amount', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('due_date', models.DateField(blank=True, help_text='When the fee is due', null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid'), ('waived', 'Waived'), ('refunded', 'Refunded')], default='pending', help_text='Current status of the fee', max_length=10)),
                ('invoice', models.FileField(blank=True, help_text='Invoice document for this fee', null=True, upload_to='invoices/')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this fee', null=True)),
            ],
            options={
                'verbose_name': 'Fee',
                'verbose_name_plural': 'Fees',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='FundingCalculationHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='When this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this record was last updated')),
                ('calculation_input', models.JSONField(help_text='Full set of manual input fields used during calculation')),
                ('calculation_result', models.JSONField(help_text='Computed funding breakdown (all fees, funds available)')),
            ],
            options={
                'verbose_name': 'Funding Calculation History',
                'verbose_name_plural': 'Funding Calculation Histories',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LoanRequirement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='When this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this record was last updated')),
                ('description', models.CharField(blank=True, help_text='Description of what this requirement covers', max_length=255, null=True)),
                ('amount', models.DecimalField(blank=True, decimal_places=2, help_text='Amount required for this specific purpose', max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(0)])),
            ],
            options={
                'verbose_name': 'Loan Requirement',
                'verbose_name_plural': 'Loan Requirements',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='QuantitySurveyor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='When this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this record was last updated')),
                ('company_name', models.CharField(help_text='Name of the company/firm', max_length=255)),
                ('contact_name', models.CharField(help_text='Name of the primary contact person', max_length=255)),
                ('phone', models.CharField(help_text='Primary contact phone number', max_length=20)),
                ('email', models.EmailField(help_text='Primary contact email address', max_length=254, validators=[django.core.validators.EmailValidator()])),
                ('address', models.TextField(blank=True, help_text='Business address', null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this contact', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this contact is currently active')),
            ],
            options={
                'verbose_name': 'Quantity Surveyor',
                'verbose_name_plural': 'Quantity Surveyors',
                'ordering': ['company_name', 'contact_name'],
            },
        ),
        migrations.CreateModel(
            name='Repayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='When this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this record was last updated')),
                ('due_date', models.DateField(blank=True, help_text='When this repayment is due', null=True)),
                ('amount', models.DecimalField(blank=True, decimal_places=2, help_text='Scheduled repayment amount', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('paid', 'Paid'), ('missed', 'Missed'), ('partial', 'Partial Payment')], default='scheduled', help_text='Current status of this repayment', max_length=10)),
                ('paid_date', models.DateField(blank=True, help_text='When the repayment was actually paid', null=True)),
                ('payment_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Actual amount paid', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('invoice', models.FileField(blank=True, help_text='Invoice or receipt for this repayment', null=True, upload_to='repayment_invoices/')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this repayment', null=True)),
            ],
            options={
                'verbose_name': 'Repayment',
                'verbose_name_plural': 'Repayments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SecurityProperty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='When this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this record was last updated')),
                ('address_unit', models.CharField(blank=True, help_text='Unit/apartment number', max_length=20, null=True)),
                ('address_street_no', models.CharField(blank=True, help_text='Street number', max_length=20, null=True)),
                ('address_street_name', models.CharField(blank=True, help_text='Street name', max_length=100, null=True)),
                ('address_suburb', models.CharField(blank=True, help_text='Suburb/city', max_length=100, null=True)),
                ('address_state', models.CharField(blank=True, help_text='State/territory', max_length=50, null=True)),
                ('address_postcode', models.CharField(blank=True, help_text='Postal code', max_length=10, null=True)),
                ('current_mortgagee', models.CharField(blank=True, help_text='Current mortgage holder', max_length=255, null=True)),
                ('first_mortgage', models.DecimalField(blank=True, decimal_places=2, help_text='First mortgage amount', max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('second_mortgage', models.DecimalField(blank=True, decimal_places=2, help_text='Second mortgage amount', max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('current_debt_position', models.DecimalField(blank=True, decimal_places=2, help_text='Current outstanding debt amount', max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('first_mortgage_debt', models.DecimalField(blank=True, decimal_places=2, help_text='First mortgage debt amount', max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('second_mortgage_debt', models.DecimalField(blank=True, decimal_places=2, help_text='Second mortgage debt amount', max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('property_type', models.CharField(blank=True, choices=[('residential', 'Residential'), ('commercial', 'Commercial'), ('industrial', 'Industrial'), ('retail', 'Retail'), ('land', 'Land'), ('rural', 'Rural'), ('other', 'Other')], help_text='Type of property', max_length=20, null=True)),
                ('description_if_applicable', models.TextField(blank=True, help_text="Additional description required when property_type is 'other'", null=True)),
                ('occupancy', models.CharField(blank=True, choices=[('owner_occupied', 'Owner Occupied'), ('investment', 'Investment Property')], help_text='How the property is occupied', max_length=20, null=True)),
                ('bedrooms', models.PositiveIntegerField(blank=True, help_text='Number of bedrooms', null=True)),
                ('bathrooms', models.PositiveIntegerField(blank=True, help_text='Number of bathrooms', null=True)),
                ('car_spaces', models.PositiveIntegerField(blank=True, help_text='Number of car spaces', null=True)),
                ('building_size', models.DecimalField(blank=True, decimal_places=2, help_text='Building size in square meters', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('land_size', models.DecimalField(blank=True, decimal_places=2, help_text='Land size in square meters', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('is_single_story', models.BooleanField(default=True, help_text='Whether the property is single story')),
                ('has_garage', models.BooleanField(default=False, help_text='Whether the property has a garage')),
                ('has_carport', models.BooleanField(default=False, help_text='Whether the property has a carport')),
                ('has_off_street_parking', models.BooleanField(default=False, help_text='Whether the property has off-street parking')),
                ('estimated_value', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated property value', max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('purchase_price', models.DecimalField(blank=True, decimal_places=2, help_text='Property purchase price', max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(0)])),
            ],
            options={
                'verbose_name': 'Security Property',
                'verbose_name_plural': 'Security Properties',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Valuer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='When this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this record was last updated')),
                ('company_name', models.CharField(help_text='Name of the company/firm', max_length=255)),
                ('contact_name', models.CharField(help_text='Name of the primary contact person', max_length=255)),
                ('phone', models.CharField(help_text='Primary contact phone number', max_length=20)),
                ('email', models.EmailField(help_text='Primary contact email address', max_length=254, validators=[django.core.validators.EmailValidator()])),
                ('address', models.TextField(blank=True, help_text='Business address', null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this contact', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this contact is currently active')),
            ],
            options={
                'verbose_name': 'Valuer',
                'verbose_name_plural': 'Valuers',
                'ordering': ['company_name', 'contact_name'],
            },
        ),
    ]
